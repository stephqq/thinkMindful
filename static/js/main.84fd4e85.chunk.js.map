{"version":3,"sources":["scripts/firebase.js","Components/Header.js","Components/Button.js","Components/Fieldset1.js","Components/Fieldset2.js","Components/Fieldset3.js","Components/Fieldset4.js","Components/EditRecord.js","Components/ViewRecord.js","Components/ViewLibrary.js","Components/Library.js","Components/Form.js","Components/Main.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","auth","GoogleAuthProvider","Header","props","className","userDetails","displayName","email","onClick","logOut","Button","this","handleClick","Component","Fieldset1","htmlFor","type","id","name","value","date","pattern","onChange","handleInputChange","situation","placeholder","icon","faChevronCircleDown","showNext","Fieldset2","ref","refProp","feeling1","maxValue","minValue","step","range1","feeling2","range2","Fieldset3","unhelpfulTh","supportingFacts","evidenceAg","alternate","Fieldset4","reRange1","reRange2","reflection","EditRecord","showNextFS","whichFS","state","fs2Ref","current","scrollIntoView","block","Swal","fire","fs3Ref","fs4Ref","e","undefined","setState","target","handleSubmit","preventDefault","submitConfirmed","thoughtRecord","database","uid","record","key","update","React","createRef","onSubmit","ViewRecord","toggleError","textContent","title","text","showCancelButton","confirmButtonText","cancelButtonText","then","result","remove","isEditing","handleError","faWindowClose","ViewLibrary","records","length","map","faExternalLinkAlt","slice","Library","isViewing","newState","filter","currentRecord","user","on","snapshot","dataDB","val","push","off","Form","showFS2","showFS3","showFS4","closeOnSubmit","Main","toggleForm","isCreating","Footer","href","rel","App","uiConfig","signInFlow","signInOptions","PROVIDER_ID","EmailAuthProvider","callbacks","signInSuccessWithAuthResult","credentialHelper","firebaseui","CredentialHelper","NONE","logout","signOut","onAuthStateChanged","currentUser","firebaseAuth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84fd4e85.chunk.js","sourcesContent":["import firebase from 'firebase';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDAtjxLhxAmpjg6uVW7t_FRLJNQcQqFCnU\",\n    authDomain: \"thinkmindful-56abf.firebaseapp.com\",\n    databaseURL: \"https://thinkmindful-56abf.firebaseio.com\",\n    projectId: \"thinkmindful-56abf\",\n    storageBucket: \"thinkmindful-56abf.appspot.com\",\n    messagingSenderId: \"788742561451\",\n    appId: \"1:788742561451:web:26a12049a797c242cae1ee\",\n    measurementId: \"G-ZMWLLB8VCL\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport const provider = new firebase.auth.GoogleAuthProvider();\nexport const auth = firebase.auth();\nexport default firebase;","import React from 'react';\n\nconst Header = (props) => {\n    return (\n        <header className=\"wrapper\">\n            <h1>think mindful</h1>\n            {\n                props.userDetails\n                    ?\n                        <div className=\"userDeets\">\n                            {/* if no displayname exists, show email */}\n                            <p>Hi {props.userDetails.displayName || props.userDetails.email}!</p>\n                            <button onClick={props.logOut}>log out</button>\n                        </div>\n                    :\n                        null\n            }\n        </header>\n    )\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Button extends Component {\n    render() {\n        return(\n            <section className=\"newThRd\">\n                <button onClick={this.props.handleClick}>create new thought record</button>\n            </section>\n        )\n    }\n}\n\nexport default Button;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronCircleDown } from '@fortawesome/free-solid-svg-icons';\n\nconst Fieldset1 = (props) => {\n    return (\n        <fieldset className=\"fs1\">\n            <legend>Situation/Trigger</legend>\n            <div>\n                <label htmlFor=\"date\">When did it happen?</label>\n                <input type=\"date\" id=\"date\" name=\"date\" value={props.date} pattern=\"\\d{4}-\\d{2}-\\d{2}\" onChange={props.handleInputChange} />\n            </div>\n            <label htmlFor=\"situation\" className=\"visuallyHidden\">Describe situation/trigger</label>\n            <textarea name=\"situation\" id=\"situation\" value={props.situation} placeholder=\"What happened? How? Where? With who?\" onChange={props.handleInputChange}></textarea>\n            <FontAwesomeIcon icon={faChevronCircleDown} className=\"nextFieldSet\" onClick={() => {props.showNext('fs2')}} />\n        </fieldset>\n    )\n}\n\nexport default Fieldset1;","import React, { Component } from 'react';\nimport InputRange from 'react-input-range';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronCircleDown } from '@fortawesome/free-solid-svg-icons';\n\nclass Fieldset2 extends Component {\n    render() {\n        return (\n            <fieldset className=\"fs2\" ref={this.props.refProp}>\n                <legend>Emotions & Body Sensations</legend>\n                <div className=\"inputRange\">\n                    <label htmlFor=\"feeling1\" className=\"visuallyHidden\">Enter emotion/body sensation</label>\n                    <input type=\"text\" name=\"feeling1\" id=\"feeling1\" value={this.props.feeling1} placeholder=\"What did you feel at the time?\" onChange={this.props.handleInputChange} />\n                    <label htmlFor=\"range1\" className=\"visuallyHidden\">Enter intensity of emotion/body sensation</label>\n                    <InputRange \n                        maxValue={100}\n                        minValue={0}\n                        step={10}\n                        value={this.props.range1}\n                        onChange={value => this.props.handleInputChange('', 'range1', value)}\n                        name=\"range1\"\n                    />\n                </div>\n                <div className=\"inputRange\">\n                    <label htmlFor=\"feeling2\" className=\"visuallyHidden\">Enter emotion/body sensation</label>\n                    <input type=\"text\" name=\"feeling2\" id=\"feeling2\" value={this.props.feeling2} placeholder=\"What did you feel at the time?\" onChange={this.props.handleInputChange} />\n                    <label htmlFor=\"range2\" className=\"visuallyHidden\">Enter intensity of emotion/body sensation</label>\n                    <InputRange \n                        maxValue={100}\n                        minValue={0}\n                        step={10}\n                        value={this.props.range2}\n                        onChange={value => this.props.handleInputChange('', 'range2', value)}\n                        name=\"range2\"\n                    />\n                </div>\n                <FontAwesomeIcon icon={faChevronCircleDown} className=\"nextFieldSet\" onClick={() => {this.props.showNext('fs3')}} />\n            </fieldset>\n        )\n    }\n}\n\nexport default Fieldset2;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronCircleDown } from '@fortawesome/free-solid-svg-icons';\n\nconst Fieldset3 = (props) => {\n    return (\n        <fieldset className=\"fs3\" ref={props.refProp}>\n            <legend>Evaluate Unhelpful Thoughts</legend>\n            <div className=\"labelContainer\">\n                <label htmlFor=\"unhelpfulTh\">Unhelpful thoughts/images:</label>\n                <label htmlFor=\"supportingFacts\">Supporting facts:</label>\n                <label htmlFor=\"evidenceAg\">Evidence against:</label>\n                <label htmlFor=\"alternate\">Alternative, more realistic and balanced, perspective:</label>\n            </div>\n            <div className=\"inputTContainer\">\n                <textarea name=\"unhelpfulTh\" id=\"unhelpfulTh\" value={props.unhelpfulTh} placeholder=\"What went through your mind? What disturbed you? What did those thoughts /images /memories mean to you, or say about you or the situation?\" onChange={props.handleInputChange}></textarea>\n                <textarea name=\"supportingFacts\" id=\"supportingFacts\" value={props.supportingFacts} placeholder=\"What facts do you have that the unhelpful thoughts are totally true?\" onChange={props.handleInputChange}></textarea>\n                <textarea name=\"evidenceAg\" id=\"evidenceAg\" value={props.evidenceAg} placeholder=\"What facts do you have that the unhelpful thoughts are NOT totally true? Is it possible that this is opinion, rather than fact? What have others said about this?\" onChange={props.handleInputChange}></textarea>\n                <textarea name=\"alternate\" id=\"alternate\" value={props.alternate} placeholder=\"What would someone else say about this situation? What’s the bigger picture? Is there another way of seeing it?\" onChange={props.handleInputChange}></textarea>\n            </div>\n            <FontAwesomeIcon icon={faChevronCircleDown} className=\"nextFieldSet\" onClick={() => {props.showNext('fs4')}} />\n        </fieldset>\n    )\n}\n\nexport default Fieldset3;","import React, { Component } from 'react';\nimport InputRange from 'react-input-range';\n\nclass Fieldset4 extends Component {\n    render() {\n        return (\n            <fieldset className=\"fs4\" ref={this.props.refProp}>\n                <legend>Re-evaluate Outcome</legend>\n                <p>What are you feeling now?</p>\n                <div className=\"inputRange\">\n                    <label htmlFor=\"reRange1\">{this.props.feeling1}:</label>\n                    <InputRange \n                            maxValue={100}\n                            minValue={0}\n                            step={10}\n                            value={this.props.reRange1}\n                            onChange={value => this.props.handleInputChange('', 'reRange1', value)}\n                            name=\"reRange1\"\n                        />\n                </div>\n                <div className=\"inputRange\">\n                    <label htmlFor=\"reRange2\">{this.props.feeling2}:</label>\n                    <InputRange \n                            maxValue={100}\n                            minValue={0}\n                            step={10}\n                            value={this.props.reRange2}\n                            onChange={value => this.props.handleInputChange('', 'reRange2', value)}\n                            name=\"reRange2\"\n                        />\n                </div>\n                <label htmlFor=\"reflection\" className=\"visuallyHidden\">Reflect:</label>\n                <textarea name=\"reflection\" id=\"reflection\" value={this.props.reflection} placeholder=\"What could you do differently? What would be more effective?\" onChange={this.props.handleInputChange}></textarea>\n                <button type=\"submit\">save thought record</button>\n            </fieldset>\n        )\n    }\n}\n\nexport default Fieldset4;","import React, { Component } from 'react';\nimport Swal from 'sweetalert2';\nimport firebase from '../scripts/firebase';\nimport Fieldset1 from './Fieldset1';\nimport Fieldset2 from './Fieldset2';\nimport Fieldset3 from './Fieldset3';\nimport Fieldset4 from './Fieldset4';\n\nclass EditRecord extends Component {\n    constructor() {\n        super();\n\n        // refs for scrollIntoView method\n        this.fs2Ref = React.createRef()\n        this.fs3Ref = React.createRef()\n        this.fs4Ref = React.createRef()\n\n        this.state = {\n            // form input storage\n            date: '',\n            situation: '',\n            feeling1: '',\n            range1: 0,\n            feeling2: '',\n            range2: 0,\n            unhelpfulTh: '',\n            supportingFacts: '',\n            evidenceAg: '',\n            alternate: '',\n            reRange1: 0,\n            reRange2: 0,\n            reflection: '',\n        }\n    }\n\n    componentDidMount() {\n        this.setState({\n            // pull props into form input storage\n            date: this.props.record[0].date,\n            situation: this.props.record[0].situation,\n            feeling1: this.props.record[0].feeling1,\n            range1: this.props.record[0].range1,\n            feeling2: this.props.record[0].feeling2,\n            range2: this.props.record[0].range2,\n            unhelpfulTh: this.props.record[0].unhelpfulTh,\n            supportingFacts: this.props.record[0].supportingFacts,\n            evidenceAg: this.props.record[0].evidenceAg,\n            alternate: this.props.record[0].alternate,\n            reRange1: this.props.record[0].reRange1,\n            reRange2: this.props.record[0].reRange2,\n            reflection: this.props.record[0].reflection,\n        })\n    }\n\n    showNextFS = (whichFS) => {\n        if (whichFS === 'fs2') {\n            //an empty string is falsy\n            if (this.state.date && this.state.situation) {\n                this.fs2Ref.current.scrollIntoView({ block: 'start' })\n            } else {\n                Swal.fire('Oops...', 'Maybe you should fill out all existing fields first before moving on.', 'error');\n            }\n        } else if (whichFS === 'fs3') {\n            //an empty string or 0 is falsy\n            if (this.state.feeling1 && this.state.feeling2 && this.state.range1 && this.state.range2) {\n                this.fs3Ref.current.scrollIntoView({ block: 'start' })\n            } else {\n                Swal.fire('Oops...', 'Maybe you should fill out all existing fields first before moving on.', 'error');\n            }\n        } else if (whichFS === 'fs4') {\n            //an empty string is falsy\n            if (this.state.unhelpfulTh && this.state.supportingFacts && this.state.evidenceAg && this.state.alternate) {\n                this.fs4Ref.current.scrollIntoView({ block: 'start' })\n            } else {\n                Swal.fire('Oops...', 'Maybe you should fill out all existing fields first before moving on.', 'error');\n            }\n        }\n    }\n\n    //this does onChange for multiple inputs using the name on each input to assign a state variable :D\n    //we take in a name and value param to address for range sliders - their onChange is not sending out an event object as the library disabled it (issues values only) so we need to provide a parameter to ensure state is saved properly in those instances\n    handleInputChange = (e, name, value) => {\n        if (name === undefined) {\n            this.setState({\n                [e.target.name]: e.target.value,\n            })\n        } else {\n            this.setState({\n                [name]: value,\n            })\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        //an empty string and 0 is falsy, not evaluating against reRange1 and reRange2 as 0 is an acceptable new rating\n        this.state.date && this.state.situation && this.state.feeling1 && this.state.feeling2 && this.state.range1 && this.state.range2 && this.state.unhelpfulTh && this.state.supportingFacts && this.state.evidenceAg && this.state.alternate && this.state.reflection\n            ?\n            this.submitConfirmed()\n            :\n            Swal.fire('Oops...', 'Maybe you should fill out all existing fields first before moving on.', 'error');\n    }\n\n    submitConfirmed = () => {\n        const thoughtRecord = {\n            date: this.state.date,\n            situation: this.state.situation,\n            feeling1: this.state.feeling1,\n            range1: this.state.range1,\n            feeling2: this.state.feeling2,\n            range2: this.state.range2,\n            unhelpfulTh: this.state.unhelpfulTh,\n            supportingFacts: this.state.supportingFacts,\n            evidenceAg: this.state.evidenceAg,\n            alternate: this.state.alternate,\n            reRange1: this.state.reRange1,\n            reRange2: this.state.reRange2,\n            reflection: this.state.reflection\n        }\n\n        const dbRef = firebase.database().ref(`${this.props.uid}/thoughts/${this.props.record[0].key}`);\n\n        dbRef.update(thoughtRecord);\n\n        this.setState({\n            // form input storage\n            date: '',\n            situation: '',\n            feeling1: '',\n            range1: 0,\n            feeling2: '',\n            range2: 0,\n            unhelpfulTh: '',\n            supportingFacts: '',\n            evidenceAg: '',\n            alternate: '',\n            reRange1: 0,\n            reRange2: 0,\n            reflection: '',\n        })\n\n        this.props.handleClick();\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <Fieldset1 showNext={this.showNextFS} handleInputChange={this.handleInputChange} date={this.state.date} situation={this.state.situation} />\n                <Fieldset2 showNext={this.showNextFS} handleInputChange={this.handleInputChange} refProp={this.fs2Ref} feeling1={this.state.feeling1} range1={this.state.range1} feeling2={this.state.feeling2} range2={this.state.range2} />\n                <Fieldset3 showNext={this.showNextFS} handleInputChange={this.handleInputChange} refProp={this.fs3Ref} unhelpfulTh={this.state.unhelpfulTh} supportingFacts={this.state.supportingFacts} evidenceAg={this.state.evidenceAg} alternate={this.state.alternate} />\n                <Fieldset4 handleInputChange={this.handleInputChange} refProp={this.fs4Ref} feeling1={this.state.feeling1} feeling2={this.state.feeling2} reRange1={this.state.reRange1} reRange2={this.state.reRange2} reflection={this.state.reflection} />\n            </form>\n        )\n    }\n}\n\nexport default EditRecord;","import React, { Component, Fragment } from 'react';\nimport firebase from '../scripts/firebase';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons';\nimport EditRecord from './EditRecord';\nimport Swal from 'sweetalert2';\n\nclass ViewRecord extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            isEditing: false,\n        }\n    }\n\n    handleClick = (e) => {\n        if (e === undefined) {\n            this.props.toggleError()\n            this.props.handleClick()\n        } else if (e.target.textContent === 'delete') {\n            Swal.fire({\n                title: 'You sure?',\n                text: `Once deleted, it's gone!`,\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonText: `I'm sure!`,\n                cancelButtonText: 'Whoops, nevermind!'\n            }).then((result) => {\n                if (result.value) {\n                    // delete\n                    const dbRef = firebase.database().ref(`${this.props.uid}/thoughts/${this.props.record[0].key}`);\n                    dbRef.remove();\n                    if (this.state.isEditing) {\n                        this.props.toggleError()\n                    }\n                    // isViewing state needs to be updated\n                    this.props.handleClick()\n                }\n            })\n        } else if (this.state.isEditing && e.target.textContent === 'view') {\n            Swal.fire({\n                title: 'You sure?',\n                text: 'Any changes to this form will not be saved.',\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonText: `I'm sure!`,\n                cancelButtonText: 'Whoops, nevermind!'\n            }).then((result) => {\n                if (result.value) {\n                    this.setState({\n                        isEditing: !this.state.isEditing\n                    }, this.props.toggleError)\n                }\n            })\n        } else if (!this.state.isEditing && e.target.textContent === 'edit') {\n            this.setState({\n                isEditing: !this.state.isEditing\n            }, this.props.toggleError)\n        }\n    }\n\n    handleError = (e) => {\n        if (this.state.isEditing) {\n            Swal.fire({\n                title: 'You sure?',\n                text: 'Any changes to this form will not be saved.',\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonText: `I'm sure!`,\n                cancelButtonText: 'Whoops, nevermind!'\n            }).then((result, e) => {\n                if (result.value) {\n                    this.props.toggleError()\n                    this.props.handleClick(e)\n                }\n            })\n        } else {\n            this.props.handleClick(e)\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"viewRecord\">\n                <FontAwesomeIcon icon={faWindowClose} className=\"closeForm\" onClick={this.handleError} />\n                <div className=\"viewOptions\">\n                    <button onClick={this.handleClick}>view</button>\n                    <button onClick={this.handleClick}>edit</button>\n                    <button onClick={this.handleClick}>delete</button>\n                </div>\n                {\n                    this.state.isEditing\n                        ?\n                        <EditRecord record={this.props.record} uid={this.props.uid} handleClick={this.handleClick} />\n                        :\n                        <Fragment>\n                            <h2>{this.props.record[0].date}</h2>\n                            <h3>Situation/Trigger</h3>\n                            <p>{this.props.record[0].situation}</p>\n                            <h3>Re-evaluated Outcome</h3>\n                            <p>{this.props.record[0].reflection}</p>\n                            <h3>Emotions & Body Sensations</h3>\n                            <p>{this.props.record[0].feeling1} - {this.props.record[0].range1}% initial intensity, {this.props.record[0].reRange1}% re-rated intensity</p>\n                            <p>{this.props.record[0].feeling2} - {this.props.record[0].range2}% initial intensity, {this.props.record[0].reRange2}% re-rated intensity</p>\n                            <h3>Unhelpful Thoughts</h3>\n                            <div className=\"labelContainer\">\n                                <p>Unhelpful thoughts/images:</p>\n                                <p>Supporting facts:</p>\n                                <p>Evidence against:</p>\n                                <p>Alternative, more realistic and balanced, perspective:</p>\n                            </div>\n                            <div className=\"inputTContainer\">\n                                <p>{this.props.record[0].unhelpfulTh}</p>\n                                <p>{this.props.record[0].supportingFacts}</p>\n                                <p>{this.props.record[0].evidenceAg}</p>\n                                <p>{this.props.record[0].alternate}</p>\n                            </div>\n                        </Fragment>\n                }\n            </div>\n        )\n    }\n}\n\nexport default ViewRecord;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons';\n\nconst ViewLibrary = (props) => {\n    return (\n        <div>\n            <h2>your thought record library</h2>\n            {\n                props.records.length === 0\n                    ?\n                        <p>No thought records available - maybe you should try creating one?</p>\n                    :\n                        <div className=\"recordGallery\">\n                            <ul>\n                            {\n                                props.records.map((record) => {\n                                    return (\n                                        <li key={record.key}>\n                                            <FontAwesomeIcon icon={faExternalLinkAlt} className=\"openRecord\" onClick={(e) => {props.handleClick(e, record.key)}} />\n                                            <h3>{record.date}</h3>\n                                                <p>Situation:&nbsp;\n                                                    {\n                                                        record.situation.slice(0, 100)\n                                                    }...\n                                                </p>\n                                        </li>\n                                    )\n                                })\n                            }\n                            </ul>\n                        </div>\n            }\n        </div>\n    )\n}\n\nexport default ViewLibrary;","import React, { Component } from 'react';\nimport firebase from '../scripts/firebase';\nimport ViewRecord from './ViewRecord';\nimport ViewLibrary from './ViewLibrary';\n\nclass Library extends Component {\n    constructor() {\n        super();\n        this.state = {\n            records: [],\n            isViewing: false,\n            currentRecord: []\n        }\n    }\n\n    componentDidMount() {\n        const dbRef = firebase.database().ref(`${this.props.user.uid}/thoughts`);\n\n        dbRef.on('value', (snapshot) => {\n            const dataDB = snapshot.val();\n            const newState = [];\n\n            for (let key in dataDB) {\n                newState.push({\n                    key: key,\n                    date: dataDB[key].date,\n                    situation: dataDB[key].situation,\n                    feeling1: dataDB[key].feeling1,\n                    range1: dataDB[key].range1,\n                    feeling2: dataDB[key].feeling2,\n                    range2: dataDB[key].range2,\n                    unhelpfulTh: dataDB[key].unhelpfulTh,\n                    supportingFacts: dataDB[key].supportingFacts,\n                    evidenceAg: dataDB[key].evidenceAg,\n                    alternate: dataDB[key].alternate,\n                    reRange1: dataDB[key].reRange1,\n                    reRange2: dataDB[key].reRange2,\n                    reflection: dataDB[key].reflection\n                })\n            }\n\n            this.setState({\n                records: newState\n            })\n        })\n    }\n\n    componentWillUnmount() {\n        const dbRef = firebase.database().ref(`${this.props.user.uid}/thoughts`);\n\n        dbRef.off();\n    }\n\n    handleClick = (e, key) => {\n        this.setState({\n            isViewing: !this.state.isViewing,\n        })\n\n        //if key contains argument (truthy)\n        if (key) {\n            const newState = [...this.state.records].filter((record) => {\n                return record.key === key;\n            });\n\n            this.setState({\n                currentRecord: newState,\n            })\n        } else {\n            this.setState({\n                currentRecord: []\n            })\n        }\n    }\n\n    render() {\n        return (\n            <section className=\"thRdLibrary\">\n                {\n                    this.state.isViewing\n                        ?\n                            <ViewRecord handleClick={this.handleClick} record={this.state.currentRecord} uid={this.props.user.uid} toggleError={this.props.toggleError} />\n                        :\n                            <ViewLibrary records={this.state.records} handleClick={this.handleClick} />\n                }\n            </section>\n        )\n    }\n}\n\nexport default Library;","import React, { Component } from 'react';\nimport firebase from '../scripts/firebase';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons';\nimport Swal from 'sweetalert2';\nimport Fieldset1 from './Fieldset1';\nimport Fieldset2 from './Fieldset2';\nimport Fieldset3 from './Fieldset3';\nimport Fieldset4 from './Fieldset4';\n\nclass Form extends Component {\n    constructor() {\n        super();\n\n        // refs for scrollIntoView method\n        this.fs2Ref = React.createRef()\n        this.fs3Ref = React.createRef()\n        this.fs4Ref = React.createRef()\n\n        this.state = {\n            // triggering form fieldset render\n            showFS2: false,\n            showFS3: false,\n            showFS4: false,\n            // form input storage\n            date: '',\n            situation: '',\n            feeling1: '',\n            range1: 0,\n            feeling2: '',\n            range2: 0,\n            unhelpfulTh: '',\n            supportingFacts: '',\n            evidenceAg: '',\n            alternate: '',\n            reRange1: 0,\n            reRange2: 0,\n            reflection: '',\n        }\n    }\n\n    showNextFS = (whichFS) => {\n        if (whichFS === 'fs2') {\n            //an empty string is falsy\n            this.state.date && this.state.situation\n                ?\n                this.setState({\n                    showFS2: true,\n                }, () => {\n                    this.fs2Ref.current.scrollIntoView({ block: 'start' })\n                })\n                :\n                Swal.fire('Oops...', 'Maybe you should fill out all existing fields first before moving on.', 'error');\n        } else if (whichFS === 'fs3') {\n            //an empty string or 0 is falsy\n            this.state.feeling1 && this.state.feeling2 && this.state.range1 && this.state.range2\n                ?\n                this.setState({\n                    showFS3: true,\n                }, () => {\n                    this.fs3Ref.current.scrollIntoView({ block: 'start' })\n                })\n                :\n                Swal.fire('Oops...', 'Maybe you should fill out all existing fields first before moving on.', 'error');\n        } else if (whichFS === 'fs4') {\n            //an empty string is falsy\n            this.state.unhelpfulTh && this.state.supportingFacts && this.state.evidenceAg && this.state.alternate\n                ?\n                this.setState({\n                    showFS4: true,\n                }, () => {\n                    this.fs4Ref.current.scrollIntoView({ block: 'start' })\n                })\n                :\n                Swal.fire('Oops...', 'Maybe you should fill out all existing fields first before moving on.', 'error');\n        }\n    }\n\n    //this does onChange for multiple inputs using the name on each input to assign a state variable :D\n    //we take in a name and value param to address for range sliders - their onChange is not sending out an event object as the library disabled it (issues values only) so we need to provide a parameter to ensure state is saved properly in those instances\n    handleInputChange = (e, name, value) => {\n        if (name === undefined) {\n            this.setState({\n                [e.target.name]: e.target.value,\n            })\n        } else {\n            this.setState({\n                [name]: value,\n            })\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        //an empty string is falsy, not evaluating against reRange1 and reRange2 as 0 is an acceptable new rating\n        this.state.reflection\n            ?\n            this.submitConfirmed()\n            :\n            Swal.fire('Oops...', 'Maybe you should fill out all existing fields first before moving on.', 'error');\n    }\n\n    submitConfirmed = () => {\n        const thoughtRecord = {\n            date: this.state.date,\n            situation: this.state.situation,\n            feeling1: this.state.feeling1,\n            range1: this.state.range1,\n            feeling2: this.state.feeling2,\n            range2: this.state.range2,\n            unhelpfulTh: this.state.unhelpfulTh,\n            supportingFacts: this.state.supportingFacts,\n            evidenceAg: this.state.evidenceAg,\n            alternate: this.state.alternate,\n            reRange1: this.state.reRange1,\n            reRange2: this.state.reRange2,\n            reflection: this.state.reflection\n        }\n\n        const dbRef = firebase.database().ref(`${this.props.user.uid}/thoughts`);\n\n        dbRef.push(thoughtRecord);\n\n        this.setState({\n            // form input storage\n            date: '',\n            situation: '',\n            feeling1: '',\n            range1: 0,\n            feeling2: '',\n            range2: 0,\n            unhelpfulTh: '',\n            supportingFacts: '',\n            evidenceAg: '',\n            alternate: '',\n            reRange1: 0,\n            reRange2: 0,\n            reflection: '',\n        })\n\n        this.props.closeOnSubmit();\n    }\n\n    render() {\n        return (\n            <section className=\"form\">\n                <form onSubmit={this.handleSubmit}>\n                    <FontAwesomeIcon icon={faWindowClose} className=\"closeForm\" onClick={this.props.handleClick} />\n                    <Fieldset1 showNext={this.showNextFS} handleInputChange={this.handleInputChange} date={this.state.date} situation={this.state.situation} />\n                    { this.state.showFS2 ? <Fieldset2 refProp={this.fs2Ref} showNext={this.showNextFS} handleInputChange={this.handleInputChange} feeling1={this.state.feeling1} range1={this.state.range1} feeling2={this.state.feeling2} range2={this.state.range2} /> : null }\n                    { this.state.showFS3 ? <Fieldset3 refProp={this.fs3Ref} showNext={this.showNextFS} handleInputChange={this.handleInputChange} unhelpfulTh={this.state.unhelpfulTh} supportingFacts={this.state.supportingFacts} evidenceAg={this.state.evidenceAg} alternate={this.state.alternate} /> : null }\n                    { this.state.showFS4 ? <Fieldset4 refProp={this.fs4Ref} handleInputChange={this.handleInputChange} feeling1={this.state.feeling1} feeling2={this.state.feeling2} reRange1={this.state.reRange1} reRange2={this.state.reRange2} reflection={this.state.reflection} /> : null }\n                </form>\n            </section>\n        )\n    }\n}\n\nexport default Form;","import React, { Component, Fragment } from 'react';\nimport Swal from 'sweetalert2';\nimport Button from './Button';\nimport Library from './Library';\nimport Form from './Form';\n\nclass Main extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            isCreating: false,\n            isEditing: false\n        }\n    }\n\n    toggleForm = () => {\n        if (this.state.isCreating || this.state.isEditing) {\n            Swal.fire({\n                title: 'You sure?',\n                text: 'You will lose your current progress if you leave this form.',\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonText: `I'm sure!`,\n                cancelButtonText: 'Whoops, nevermind!'\n            }).then((result) => {\n                if (result.value) {\n                    this.setState({\n                        isCreating: !this.state.isCreating,\n                    })\n                }\n            })\n        } else {\n            this.setState({\n                isCreating: !this.state.isCreating,\n            })\n        }\n    }\n\n    closeOnSubmit = () => {\n        this.setState({\n            isCreating: !this.state.isCreating\n        })\n    }\n\n    toggleError = () => {\n        this.setState({\n            isEditing: !this.state.isEditing\n        })\n    }\n\n    render() {\n        return (\n            <main className=\"wrapper\">\n                {\n                    this.state.isCreating ?\n                        <Form handleClick={this.toggleForm} closeOnSubmit={this.closeOnSubmit} user={this.props.user} /> :\n                        <Fragment>\n                            <Button handleClick={this.toggleForm} />\n                            <Library user={this.props.user} toggleError={this.toggleError} />\n                        </Fragment>\n                }\n            </main>\n        )\n    }\n}\n\nexport default Main;","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <footer className=\"wrapper\">\n            <p>&copy; 2020 <a href=\"https://stephaniekerr.io\" target=\"_blank\" rel=\"noopener noreferrer\">Stephanie Kerr</a></p>\n        </footer>\n    )\n}\n\nexport default Footer;","import React, { Component, Fragment } from 'react';\nimport firebase, { auth } from './scripts/firebase';\nimport * as firebaseui from 'firebaseui';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport './App.css';\nimport Header from './Components/Header';\nimport Main from './Components/Main';\nimport Footer from './Components/Footer';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      user: null,\n    }\n  }\n\n  componentDidMount() {\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({ user });\n      }\n    })\n  }\n\n  uiConfig = {\n    signInFlow: 'popup',\n    signInOptions: [\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      firebase.auth.EmailAuthProvider.PROVIDER_ID\n    ],\n    callbacks: {\n      // Avoid redirects after sign-in.\n      signInSuccessWithAuthResult: () => false\n    },\n    credentialHelper: firebaseui.auth.CredentialHelper.NONE\n  }\n\n  logout = () => {\n    auth.signOut()\n      .then(() => {\n        this.setState({\n          user: null,\n        })\n      })\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Header \n          userDetails={this.state.user}\n          logOut={this.logout}\n        />\n        {\n          this.state.user\n            ?\n            <Fragment>\n              <Main user={auth.currentUser} />\n            </Fragment>\n            :\n            <main className=\"wrapper\">\n              <section className=\"logInSection\">\n                <div className=\"logInContainer\">\n                  <p>Welcome to think mindful!</p>\n                  <p>For a demo of this app please use the following credentials:</p>\n                  <p>username: demothinkmindful@gmail.com</p>\n                  <p>password: demojuno</p>\n                </div>\n                <div className=\"logInContainer\">\n                  <StyledFirebaseAuth uiConfig={this.uiConfig} firebaseAuth={firebase.auth()}/>\n                </div>\n              </section>\n            </main>\n        }\n        <Footer />\n      </Fragment>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}